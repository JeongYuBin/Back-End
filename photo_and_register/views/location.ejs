<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Location Map</title>
    <script src="https://dapi.kakao.com/v2/maps/sdk.js?appkey=3585dfdc26eb8686b36cb652a1410094&libraries=services"></script>
    <style>
        #map {
            width: 100%;
            height: 500px;
            position: relative;
        }
        .buttons-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 20px 0;
        }
        .button-column {
            width: 100%;
            margin: 10px 0;
        }
        .button-column button {
            display: block;
            width: calc(100% - 20px);
            padding: 15px;
            font-size: 18px;
            border: 2px solid #007bff;
            border-radius: 5px;
            color: #007bff;
            background-color: #fff;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.3s, color 0.3s, border-color 0.3s;
            margin: 0 auto;
        }
        .button-column button:hover {
            background-color: #007bff;
            color: #fff;
            border-color: #0056b3;
            transform: scale(1.05);
        }
        .button-column button:active {
            background-color: #0056b3;
            color: #fff;
            border-color: #004494;
            transform: scale(0.95);
        }
        h1 {
            text-align: left;
            margin-left: 20px;
        }
        #placesList {
            list-style: none;
            padding: 0;
            margin: 0;
            max-height: 300px;
            overflow-y: auto;
        }
        #placesList li {
            margin-bottom: 10px;
            cursor: pointer;
        }
        .markerbg {
            background: url('https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png') no-repeat;
            width: 36px;
            height: 37px;
            display: inline-block;
            text-align: center;
            line-height: 37px;
            color: #fff;
            font-weight: bold;
            font-size: 14px;
        }
        .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 300px;
            height: 300px;
            background: rgba(255, 255, 255, 0.9);
            border: 2px solid #ddd;
            overflow: auto;
            z-index: 10;
            padding: 10px;
        }
    </style>
</head>
<body>
    <h1>Location Map</h1>
    <div id="map">
        <div id="placesListContainer" class="overlay">
            <ul id="placesList"></ul>
        </div>
    </div>
    <div class="buttons-container">
        <div class="button-column">
            <button id="find-accommodations">주변 숙소 찾기</button>
        </div>
        <div class="button-column">
            <button id="find-restaurants">주변 맛집 찾기</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var mapContainer = document.getElementById('map');
            var placesListContainer = document.getElementById('placesListContainer');
            var mapOptions = {
                center: new kakao.maps.LatLng(37.5665, 126.978),
                level: 3
            };
            var map = new kakao.maps.Map(mapContainer, mapOptions);
            var infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });
            var places = new kakao.maps.services.Places();
            var geocoder = new kakao.maps.services.Geocoder();
            var markers = [];
            var address = '<%= address %>';

            geocoder.addressSearch(address, function(result, status) {
                if (status === kakao.maps.services.Status.OK) {
                    var coords = new kakao.maps.LatLng(result[0].y, result[0].x);
                    map.setCenter(coords);
                    var marker = new kakao.maps.Marker({
                        map: map,
                        position: coords
                    });

                    document.getElementById('find-accommodations').addEventListener('click', function() {
                        searchPlaces('숙소');
                    });

                    document.getElementById('find-restaurants').addEventListener('click', function() {
                        searchPlaces('맛집');
                    });
                } else {
                    console.error('Failed to search address:', status);
                }
            });

            function searchPlaces(category) {
                var keyword = `${address} ${category}`;

                places.keywordSearch(keyword, function(data, status, pagination) {
                    if (status === kakao.maps.services.Status.OK) {
                        displayPlaces(data);
                    } else {
                        console.error('Failed to search places:', status);
                    }
                });
            }

            function displayPlaces(places) {
                var listEl = document.getElementById('placesList');
                var bounds = new kakao.maps.LatLngBounds();
                var fragment = document.createDocumentFragment();

                removeAllChildNods(listEl);
                removeMarker();

                for (var i = 0; i < places.length; i++) {
                    var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x);
                    var marker = addMarker(placePosition, i);
                    var itemEl = getListItem(i, places[i]);

                    bounds.extend(placePosition);

                    (function(marker, title) {
                        kakao.maps.event.addListener(marker, 'click', function() {
                            displayInfowindow(marker, title);
                        });

                        itemEl.onclick = function() {
                            map.setCenter(marker.getPosition());
                            displayInfowindow(marker, title);
                        };
                    })(marker, places[i].place_name);

                    fragment.appendChild(itemEl);
                }

                listEl.appendChild(fragment);
                map.setBounds(bounds);
            }

            function getListItem(index, place) {
                var el = document.createElement('li');
                el.innerHTML = '<span class="markerbg" style="background-position: 0 ' + (-46 * index) + 'px;">' + (index + 1) + '</span>' +
                                '<div class="info">' +
                                '   <h5>' + place.place_name + '</h5>' +
                                (place.road_address_name ? 
                                    '<span>' + place.road_address_name + '</span>' +
                                    '<span class="jibun gray">' + place.address_name + '</span>' :
                                    '<span>' + place.address_name + '</span>') +
                                '   <span class="tel">' + place.phone + '</span>' +
                                '</div>';
                el.className = 'item';
                return el;
            }

            function addMarker(position, idx) {
                var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png',
                    imageSize = new kakao.maps.Size(36, 37),
                    imgOptions =  {
                        spriteSize : new kakao.maps.Size(36, 691),
                        spriteOrigin : new kakao.maps.Point(0, (idx * 46) + 10),
                        offset: new kakao.maps.Point(13, 37)
                    },
                    markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),
                    marker = new kakao.maps.Marker({
                        position: position,
                        image: markerImage 
                    });

                marker.setMap(map);
                markers.push(marker);
                return marker;
            }

            function removeMarker() {
                for (var i = 0; i < markers.length; i++) {
                    markers[i].setMap(null);
                }
                markers = [];
            }

            function removeAllChildNods(el) {   
                while (el.hasChildNodes()) {
                    el.removeChild(el.lastChild);
                }
            }

            function displayInfowindow(marker, title) {
                var content = '<div style="padding:5px;z-index:1;">' + title + '</div>';
                infowindow.setContent(content);
                infowindow.open(map, marker);
            }
        });
    </script>
</body>
</html>
