<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Location Map</title>
    <script src="https://dapi.kakao.com/v2/maps/sdk.js?appkey=3585dfdc26eb8686b36cb652a1410094&libraries=services"></script>
    <style>
        #map {
            width: 100%;
            height: 500px;
            position: relative;
        }
        .buttons-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 20px 0;
        }
        .button-column {
            width: 100%;
            margin: 10px 0;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }
        .button-column button {
            display: block;
            width: calc(33% - 20px);
            padding: 15px;
            font-size: 18px;
            border: 2px solid #007bff;
            border-radius: 5px;
            color: #007bff;
            background-color: #fff;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.3s, color 0.3s, border-color 0.3s;
            margin: 10px;
        }
        .button-column button:hover {
            background-color: #007bff;
            color: #fff;
            border-color: #0056b3;
            transform: scale(1.05);
        }
        .button-column button:active {
            background-color: #0056b3;
            color: #fff;
            border-color: #004494;
            transform: scale(0.95);
        }
        h1 {
            text-align: left;
            margin-left: 20px;
        }
        h2 {
            text-align: center;
            margin: 20px 0;
            font-size: 24px;
        }
        #placesList {
            list-style: none;
            padding: 0;
            margin: 0;
            max-height: 300px;
            overflow-y: auto;
        }
        #placesList li {
            margin-bottom: 10px;
            cursor: pointer;
        }
        .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 300px;
            height: 300px;
            background: rgba(255, 255, 255, 0.9);
            border: 2px solid #ddd;
            overflow: auto;
            z-index: 10;
            padding: 10px;
        }
    </style>
</head>
<body>
    <h1>Location Map</h1>
    <div id="map">
        <div id="placesListContainer" class="overlay">
            <ul id="placesList"></ul>
        </div>
    </div>

    <!-- 검색된 장소의 상세 정보를 출력할 영역 -->
    <div id="detailContainer" style="max-height: 200px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; margin-top: 20px;">
        <h3>Place Details</h3>
        <ul id="detailList" style="list-style-type: none; padding: 0;"></ul>
    </div>

    <div class="buttons-container">
        <h2>정렬 기준</h2>
        <div class="button-column">
            <select id="sortOptions">
                <option value="accuracy">정확도순</option>
                <option value="distance">거리순</option>
            </select>
        </div>
    </div>
    <div class="buttons-container">
        <h2>숙소 BEST</h2>
        <div class="button-column">
            <button id="accommodation">전체</button>
            <button id="accommodation1">호텔</button>
            <button id="accommodation2">모텔</button>
            <button id="accommodation3">펜션</button>
            <button id="accommodation4">리조트</button>
            <button id="accommodation5">캠핑</button>
            <button id="accommodation6">게스트하우스</button>
        </div>
    </div>
    <div class="buttons-container">
        <h2>맛집 BEST</h2>
        <div class="button-column">
            <button id="restaurant">전체</button>
            <button id="cafe">카페</button>
            <button id="restaurant1">한식</button>
            <button id="restaurant2">양식</button>
            <button id="restaurant3">일식</button>
            <button id="restaurant4">중식</button>
        </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        var mapContainer = document.getElementById('map');
        var placesListContainer = document.getElementById('placesListContainer');
        var address = '<%= address %>'; // 서버에서 전달받은 주소
        var latitude = '<%= latitude %>'; // 서버에서 전달받은 위도
        var longitude = '<%= longitude %>'; // 서버에서 전달받은 경도
        var userId = '<%= userId %>'; // 서버에서 전달받은 사용자 ID (필요시 추가)
        var likedPlaceIds = '<%= JSON.stringify(likedPlaceIds) %>';
        var mapOptions;
        var centerLatLng;

        console.log("주소:", address);
        console.log("위도:", latitude);
        console.log("경도:", longitude);

        // Kakao 지도 생성 함수
        function createMap(centerLatLng) {
            mapOptions = {
                center: centerLatLng,
                level: 3
            };
            return new kakao.maps.Map(mapContainer, mapOptions);
        }

        // 지도 중심 좌표 설정 함수
        function setMapCenter(lat, lng) {
            var latLng = new kakao.maps.LatLng(lat, lng);
            var map = createMap(latLng);

            var marker = new kakao.maps.Marker({
                map: map,
                position: latLng
            });

            return map;
        }

        // 주소를 기준으로 중심 좌표를 설정하는 함수
        function searchAddressAndSetMapCenter(address) {
            var geocoder = new kakao.maps.services.Geocoder();
            geocoder.addressSearch(address, function(result, status) {
                if (status === kakao.maps.services.Status.OK) {
                    console.log("주소 검색 성공:", result);
                    centerLatLng = new kakao.maps.LatLng(result[0].y, result[0].x);
                    var map = setMapCenter(centerLatLng.getLat(), centerLatLng.getLng());
                } else {
                    console.error("주소 검색 실패:", status);
                    alert('주소 검색에 실패했습니다. 주소를 다시 확인해주세요.');
                }
            });
        }

        if (latitude && longitude && latitude !== 'Unknown' && longitude !== 'Unknown' && !isNaN(parseFloat(latitude)) && !isNaN(parseFloat(longitude))) {
            console.log("GPS 정보를 사용하여 지도 중심을 설정합니다.");
            centerLatLng = new kakao.maps.LatLng(parseFloat(latitude), parseFloat(longitude));
            var map = setMapCenter(centerLatLng.getLat(), centerLatLng.getLng());
        } else if (address && address !== 'Unknown') {
            console.log("주소 정보를 사용하여 지도 중심을 설정합니다.");
            searchAddressAndSetMapCenter(address);
        } else {
            console.log("주소가 없습니다. 주소를 입력해 주세요.");
            alert('주소를 입력해 주세요.');
            // 여기서 주소 입력을 위한 추가 작업을 할 수 있습니다.
            // 예를 들어, 주소 입력을 위한 팝업을 띄우는 등의 작업
        }

        var infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });
        var places = new kakao.maps.services.Places();
        var markers = [];

        // 정렬 기준 선택 옵션을 가져옵니다.
        var sortOptions = document.getElementById('sortOptions');

        // 상세 정보를 출력하는 함수
        function displayPlaceDetails(details) {
            var detailList = document.getElementById('detailList');
            detailList.innerHTML = ''; // 기존 내용을 제거

            details.forEach(function(detail) {
                var detailItem = document.createElement('li');
                detailItem.innerHTML = `
                    <strong>${detail.name}</strong><br>
                    주소: ${detail.address}<br>
                    전화번호: ${detail.phone ? '없음' : detail.phone}
                `;
                detailList.appendChild(detailItem);
            });
        }

        // 각 버튼에 이벤트 리스너 추가
        document.getElementById('accommodation').addEventListener('click', function() {
            searchPlaces('AD5'); // 숙소 전체 카테고리 코드
        });
        document.getElementById('accommodation1').addEventListener('click', function() {
            searchPlacesByKeyword('호텔'); // 호텔 검색
        });
        document.getElementById('accommodation2').addEventListener('click', function() {
            searchPlacesByKeyword('모텔'); // 모텔 검색
        });
        document.getElementById('accommodation3').addEventListener('click', function() {
            searchPlacesByKeyword('펜션'); // 펜션 검색
        });
        document.getElementById('accommodation4').addEventListener('click', function() {
            searchPlacesByKeyword('리조트'); // 리조트 검색
        });
        document.getElementById('accommodation5').addEventListener('click', function() {
            searchPlacesByKeyword('캠핑'); // 캠핑 검색
        });
        document.getElementById('accommodation6').addEventListener('click', function() {
            searchPlacesByKeyword('게스트하우스'); // 게스트하우스 검색
        });

        document.getElementById('restaurant').addEventListener('click', function() {
            searchPlaces('FD6'); // 음식점 전체 카테고리 코드
        });
        document.getElementById('cafe').addEventListener('click', function() {
            searchPlacesByKeyword('카페'); // 카페 검색
        });
        document.getElementById('restaurant1').addEventListener('click', function() {
            searchPlacesByKeyword('한식'); // 한식 검색
        });
        document.getElementById('restaurant2').addEventListener('click', function() {
            searchPlacesByKeyword('양식'); // 양식 검색
        });
        document.getElementById('restaurant3').addEventListener('click', function() {
            searchPlacesByKeyword('일식'); // 일식 검색
        });
        document.getElementById('restaurant4').addEventListener('click', function() {
            searchPlacesByKeyword('중식'); // 중식 검색
        });

        // 장소 검색 함수
        function searchPlaces(categoryCode) {
            var options = {
                location: centerLatLng,
                sort: sortOptions.value
            };

            places.categorySearch(categoryCode, function(result, status) {
                if (status === kakao.maps.services.Status.OK) {
                    displayPlaces(result);
                    displayPlaceDetails(result.map(function(item) {
                        return {
                            name: item.place_name,
                            address: item.road_address_name || item.address_name,
                            phone: item.phone
                        };
                    }));
                } else if (status === kakao.maps.services.Status.ZERO_RESULT) {
                    alert('검색 결과가 존재하지 않습니다.');
                } else {
                    alert('검색 중 오류가 발생했습니다.');
                }
            }, options);
        }

        // 키워드로 장소 검색 함수
        function searchPlacesByKeyword(keyword) {
            var options = {
                location: centerLatLng,
                sort: sortOptions.value
            };

            places.keywordSearch(keyword, function(result, status) {
                if (status === kakao.maps.services.Status.OK) {
                    displayPlaces(result);
                    displayPlaceDetails(result.map(function(item) {
                        return {
                            name: item.place_name,
                            address: item.road_address_name || item.address_name,
                            phone: item.phone
                        };
                    }));
                } else if (status === kakao.maps.services.Status.ZERO_RESULT) {
                    alert('검색 결과가 존재하지 않습니다.');
                } else {
                    alert('검색 중 오류가 발생했습니다.');
                }
            }, options);
        }

        // 검색된 장소 목록을 표시하는 함수
        function displayPlaces(places) {
            var listEl = document.getElementById('placesList');
            listEl.innerHTML = '';

            markers.forEach(function(marker) {
                marker.setMap(null); // 기존 마커 제거
            });
            markers = [];

            places.forEach(function(place) {
                var itemEl = document.createElement('li');
                var checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.checked = likedPlaceIds.includes(place.id);
                checkbox.addEventListener('click', function() {
                    handleCheckboxClick(place.id, userId, checkbox.checked);
                });

                itemEl.appendChild(checkbox);
                itemEl.appendChild(document.createTextNode(place.place_name));
                listEl.appendChild(itemEl);

                var marker = new kakao.maps.Marker({
                    map: map,
                    position: new kakao.maps.LatLng(place.y, place.x)
                });
                markers.push(marker);

                kakao.maps.event.addListener(marker, 'mouseover', function() {
                    displayInfowindow(marker, place.place_name);
                });

                kakao.maps.event.addListener(marker, 'mouseout', function() {
                    infowindow.close();
                });
            });
        }

        // 체크박스 클릭 이벤트 처리 함수
        function handleCheckboxClick(placeId, userId, isChecked) {
            var url = isChecked ? '/places/add' : '/places/remove';
            var data = {
                placeId: placeId,
                userId: userId
            };

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    console.log('요청 성공:', result);
                } else {
                    console.error('요청 실패:', result);
                }
            })
            .catch(error => {
                console.error('요청 오류:', error);
            });
        }

        // 정보창을 표시하는 함수
        function displayInfowindow(marker, title) {
            var content = '<div style="padding:5px;z-index:1;">' + title + '</div>';
            infowindow.setContent(content);
            infowindow.open(map, marker);
        }
      });
    </script>
</body>
</html>